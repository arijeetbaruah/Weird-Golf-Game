<!--
***********************************************************************************************
Microsoft.Cpp.orbis.Clang.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.
***********************************************************************************************
-->

<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(VCTargetsPath)\Platforms\ORBIS\ImportBefore\*.$(PlatformToolset).targets" Condition="Exists('$(VCTargetsPath)\Platforms\ORBIS\ImportBefore')" />

  <UsingTask TaskName="ClangCL" AssemblyFile="$(VCTargetsPath)Platforms\ORBIS\SCE.Build.CppTasks.orbis.dll" />
  <UsingTask TaskName="ClangLink" AssemblyFile="$(VCTargetsPath)Platforms\ORBIS\SCE.Build.CppTasks.orbis.dll" />
  <UsingTask TaskName="SCEMessage" AssemblyFile="$(VCTargetsPath)Platforms\ORBIS\SCE.Build.CppTasks.orbis.dll" />

  <!-- *******************************************************************************************
        CLCompile
       ******************************************************************************************* -->

  <ItemDefinitionGroup>
    <ClCompile>
      <!-- Check for C++17 and add MS's %(LanguageStandard) metadata definition to enable IntelliSense's support for the standard. -->
      <LanguageStandard Condition="'%(ClCompile.CppLanguageStd)' == 'Cpp17'">stdcpp17</LanguageStandard>
    </ClCompile>
  </ItemDefinitionGroup>

  <!-- Calculate ClCompile items from the selection made by the user in the IDE. Include additional PCH files when used in a project. -->
  <Target Name="SelectClCompile" DependsOnTargets="_SelectedFiles;$(ComputeCompileInputsTargets);SelectCustomBuild">
    <PropertyGroup>
      <!-- Add the PCH to the list of files to be compiled. -->
      <_ClCompile_pch Condition="$(SelectedFilesBuildPCH) != 'false' and '%(ClCompile.PrecompiledHeader)' == 'Create'">@(ClCompile)</_ClCompile_pch>
    </PropertyGroup>
    <ItemGroup Condition="'@(SelectedFiles)'!=''">
      <ClCompile Remove="@(ClCompile)" Condition="'%(Identity)'!='@(SelectedFiles)' and '%(Identity)'!='$(_ClCompile_pch)'"/>
      <ClCompile>
        <!-- Turn off MinimalRebuildFromTracking for files that are selected to force them to be compiled. So PCHs are only compiled when needed (or specifically selected). -->
        <MinimalRebuildFromTracking Condition="'%(Identity)'=='@(SelectedFiles)'">false</MinimalRebuildFromTracking>
      </ClCompile>
    </ItemGroup>
  </Target>

  <!-- Set the appropriate CompileAs value from Default where we know the intended usage. -->
  <Target Name="ComputeClCompileAsFromDefault"
          Condition="'@(ClCompile)' != ''">

    <!-- If the file is set to Create a pch, then set the ComileAs language to create a pch file with from its extension. -->
    <!-- Only .c files explicitly tell us we're compiling C only, so assume all other extensions are for C++ unless a value was provided already. -->
    <ItemGroup>
      <ClCompile>
        <CompileAs Condition="'%(ClCompile.PrecompiledHeader)' == 'Create' and '%(ClCompile.Extension)' == '.c'">CompileAsCHeader</CompileAs>
        <CompileAs Condition="'%(ClCompile.PrecompiledHeader)' == 'Create' and '%(ClCompile.Extension)' != '.c'">CompileAsCppHeader</CompileAs>
      </ClCompile>
    </ItemGroup>

    <!-- If we're compiling a header file and no value for CompileAs is given, set CompileAs to create a pch file. -->
    <ItemGroup>
      <ClCompile>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.h'">CompileAsCppHeader</CompileAs>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.hpp'">CompileAsCppHeader</CompileAs>
      </ClCompile>
    </ItemGroup>

    <!-- If we're compiling an assembler file and no value for CompileAs is given, then set CompileAs to assembler. -->
    <ItemGroup>
      <ClCompile>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.s'">CompileAsAssembler</CompileAs>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.asm'">CompileAsAssembler</CompileAs>
      </ClCompile>
    </ItemGroup>
  </Target>

  <!-- Calculate the files which are generating PCH files after forcing CompileAs where necessary in ComputeClCompileAsFromDefault. -->
  <Target Name="ComputePchClGeneration"
          Condition="'@(ClCompile)' != ''"
          DependsOnTargets="ComputeClCompileAsFromDefault">

    <!-- Add a new property for all files that are set to generate a pch file, as long as they are included in the build -->
    <ItemGroup>
      <ClCompile Condition="('%(ClCompile.ExcludedFromBuild)'!='true') and
                                     ('%(ClCompile.CompileAs)' == 'CompileAsCppHeader' or '%(ClCompile.CompileAs)' == 'CompileAsCHeader')">
        <GeneratesPchFile>true</GeneratesPchFile>
        <LinkCompiled>false</LinkCompiled>
        <LibCompiled>false</LibCompiled>
        <ImpLibCompiled>false</ImpLibCompiled>
      </ClCompile>
    </ItemGroup>
  </Target>

  <!-- Need to disable this VS2015 specific target as it modifies %(ClCompile.CompileAs) before we get the chance in ComputeClCompileAsFromDefault -->
  <Target Name="FixupCLCompileOptions"
            Condition="'@(ClCompile)' != ''">
  </Target>
  
  <Target Name="ClCompile"
          Condition="'@(ClCompile)' != ''"
          DependsOnTargets="SelectClCompile;ComputeClCompileAsFromDefault;ComputePchClGeneration;MakeDirsForCl">

    <PropertyGroup>
      <ContinueCompilingOnError Condition="'$(ContinueOnError)' == 'true'">true</ContinueCompilingOnError>
    </PropertyGroup>

    <ItemGroup>
      <ClCompile>
        <NoStandardIncludePaths       Condition="'$(NoStandardIncludePaths)' == 'true'">true</NoStandardIncludePaths>
        <PrecompiledHeader            Condition="'%(CompileAs)' == 'CompileAsAssembler'">NotUsing</PrecompiledHeader>
        <CppLanguageStd               Condition="'%(CompileAs)' == 'CompileAsC' or '%(CompileAs)' == 'CompileAsCHeader'"></CppLanguageStd>
        <CppLanguageStd               Condition="'%(CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.c'"></CppLanguageStd>
        <CLanguageStd                 Condition="'%(CompileAs)' == 'CompileAsCpp' or '%(CompileAs)' == 'CompileAsCppHeader'"></CLanguageStd>
        <CLanguageStd                 Condition="'%(CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.cpp'"></CLanguageStd>
        <CLanguageStd                 Condition="'%(CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.cxx'"></CLanguageStd>
        <CLanguageStd                 Condition="'%(CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.cc'"></CLanguageStd>
        <ExtendedDiagnostics          Condition="'%(ExtendedDiagnostics)' == '' and '%(EnableFixits)' == 'true'">true</ExtendedDiagnostics>
        <LinkTimeOptimization         Condition="'%(LinkTimeOptimization)' == 'Full'">true</LinkTimeOptimization>
        <LinkTimeOptimization         Condition="'%(LinkTimeOptimization)' == 'Thin'">true</LinkTimeOptimization>
        <LinkTimeOptimization         Condition="'%(LinkTimeOptimization)' == 'None'">false</LinkTimeOptimization>
        <MinimalRebuildFromTracking   Condition="'$(_BuildActionType)' != 'Build' or '$(ForceRebuild)' == 'true'">false</MinimalRebuildFromTracking>
      </ClCompile>
    </ItemGroup>

    <!-- If the user is explicitly creating a pch file, then replace the object path to be the pch path to tell the compiler to use this to output to.-->
    <!-- No object file is generated by the compiler when creating a pch file.-->
    <!-- The MSVC build rules will have provided us with a default pch path if the user didn't provide their own. -->
    <ItemGroup>
      <ClCompile>
        <_ObjectFileName  Condition="'%(ClCompile.PrecompiledHeader)' == 'Create' and
                                     '%(ClCompile.PrecompiledHeaderOutputFile)' != ''">%(ClCompile.ObjectFileName)</_ObjectFileName>
      </ClCompile>
      <ClCompile>
        <ObjectFileName   Condition="'%(ClCompile.PrecompiledHeader)' == 'Create' and
                                     '%(ClCompile.PrecompiledHeaderOutputFile)' != ''">%(ClCompile.PrecompiledHeaderOutputFile)</ObjectFileName>
      </ClCompile>
    </ItemGroup>

    <!-- Precompiled headers - need to build them first -->
    <ClangCL Condition = "'%(ClCompile.GeneratesPchFile)' == 'true' and '%(ClCompile.ExcludedFromBuild)'!='true'"
        AdditionalIncludeDirectories               ="%(ClCompile.AdditionalIncludeDirectories);$(IncludePath)"
        NoStandardIncludePaths                     ="%(ClCompile.NoStandardIncludePaths)"
        PreprocessorDefinitions                    ="%(ClCompile.PreprocessorDefinitions)"
        ForcedIncludeFiles                         ="%(ClCompile.ForcedIncludeFiles)"
        GenerateDebugInformation                   ="%(ClCompile.GenerateDebugInformation)"
        InlinedScopes                              ="%(ClCompile.InlinedScopes)"
        Warnings                                   ="%(ClCompile.Warnings)"
        ExtraWarnings                              ="%(ClCompile.ExtraWarnings)"
        EnableSpecificWarnings                     ="%(ClCompile.EnableSpecificWarnings)"
        DisableSpecificWarnings                    ="%(ClCompile.DisableSpecificWarnings)"
        ErrorOnSpecificWarnings                    ="%(ClCompile.ErrorOnSpecificWarnings)"
        WarningsAsErrors                           ="%(ClCompile.WarningsAsErrors)"
        EnableFixits                               ="%(ClCompile.EnableFixits)"
        ExtendedDiagnostics                        ="%(ClCompile.ExtendedDiagnostics)"
        CompileAs                                  ="%(ClCompile.CompileAs)"
        MultiProcessorCompilation                  ="false"
        ProcessorNumber                            ="%(ClCompile.ProcessorNumber)"
        Distributable                              ="false"
        OptimizationLevel                          ="%(ClCompile.OptimizationLevel)"
        FastMath                                   ="%(ClCompile.FastMath)"
        NoStrictAliasing                           ="%(ClCompile.NoStrictAliasing)"
        UnrollLoops                                ="%(ClCompile.UnrollLoops)"
        LinkTimeOptimization                       ="%(ClCompile.LinkTimeOptimization)"
        CppExceptions                              ="%(ClCompile.CppExceptions)"
        RuntimeTypeInfo                            ="%(ClCompile.RuntimeTypeInfo)"
        CppLanguageStd                             ="%(ClCompile.CppLanguageStd)"
        CLanguageStd                               ="%(ClCompile.CLanguageStd)"
        AnsiCompliance                             ="%(ClCompile.AnsiCompliance)"
        CharUnsigned                               ="%(ClCompile.CharUnsigned)"
        MsExtensions                               ="%(ClCompile.MsExtensions)"
        PrecompiledHeader                          ="%(ClCompile.PrecompiledHeader)"
        PrecompiledHeaderOutputFile                ="%(ClCompile.PrecompiledHeaderOutputFile)"
        UndefinedBehavior                          ="%(ClCompile.UndefinedBehavior)"
        AddressSanitizer                           ="%(ClCompile.AddressSanitizer)"
        EnableCodeCoverage                         ="%(ClCompile.EnableCodeCoverage)"
        CodeCoverageOutputFile                     ="%(ClCompile.CodeCoverageOutputFile)"
        TrackerLogDirectory                        ="%(ClCompile.TrackerLogDirectory)"
        AdditionalOptions                          ="%(ClCompile.AdditionalOptions)"
        BuildingInIDE                              ="$(BuildingInsideVisualStudio)"
        Sources                                    ="@(ClCompile)"
        TLogReadFiles                              ="@(CLTLogReadFiles)"
        TLogWriteFiles                             ="@(CLTLogWriteFiles)"
        ToolExe                                    ="$(CLToolExe)"
        ToolPath                                   ="$(CLToolPath)"
        TrackFileAccess                            ="$(TrackFileAccess)"
        MinimalRebuildFromTracking                 ="%(ClCompile.MinimalRebuildFromTracking)"
        ToolArchitecture                           ="$(CLToolArchitecture)"
        AcceptableNonZeroExitCodes                 ="%(ClCompile.AcceptableNonZeroExitCodes)"
        DistributedBuild                           ="$(DistributedBuild)"
        DistributedBuildId                         ="$(DistributedBuildId)"
        SnDbsOptions                               ="$(SnDbsOptions)"
        MaxIncrediBuildCompiles                    ="$(MaxIncrediBuildCompiles)"
        PreprocessToFile                           ="$(PreprocessToFile)"
        ProjectName                                ="$(ProjectName)"
        ObjectExt                                  ="$(ObjectExt)"
        IntelliSenseProperty                       ="$(ORBISIntelliSense)"
        PlatformToolset                            ="$(PlatformToolset)"
        ContinueCompilingOnError                   ="$(ContinueCompilingOnError)"
        />

    <!-- Rest of the sources -->
    <ClangCL Condition = "'%(ClCompile.GeneratesPchFile)' != 'true' and '%(ClCompile.ExcludedFromBuild)'!='true'"
        AdditionalIncludeDirectories               ="%(ClCompile.AdditionalIncludeDirectories);$(IncludePath)"
        NoStandardIncludePaths                     ="%(ClCompile.NoStandardIncludePaths)"
        PreprocessorDefinitions                    ="%(ClCompile.PreprocessorDefinitions)"
        ForcedIncludeFiles                         ="%(ClCompile.ForcedIncludeFiles)"
        GenerateDebugInformation                   ="%(ClCompile.GenerateDebugInformation)"
        InlinedScopes                              ="%(ClCompile.InlinedScopes)"
        Warnings                                   ="%(ClCompile.Warnings)"
        ExtraWarnings                              ="%(ClCompile.ExtraWarnings)"
        EnableSpecificWarnings                     ="%(ClCompile.EnableSpecificWarnings)"
        DisableSpecificWarnings                    ="%(ClCompile.DisableSpecificWarnings)"
        ErrorOnSpecificWarnings                    ="%(ClCompile.ErrorOnSpecificWarnings)"
        WarningsAsErrors                           ="%(ClCompile.WarningsAsErrors)"
        EnableFixits                               ="%(ClCompile.EnableFixits)"
        ExtendedDiagnostics                        ="%(ClCompile.ExtendedDiagnostics)"
        CompileAs                                  ="%(ClCompile.CompileAs)"
        MultiProcessorCompilation                  ="%(ClCompile.MultiProcessorCompilation)"
        ProcessorNumber                            ="%(ClCompile.ProcessorNumber)"
        Distributable                              ="%(ClCompile.Distributable)"
        OptimizationLevel                          ="%(ClCompile.OptimizationLevel)"
        FastMath                                   ="%(ClCompile.FastMath)"
        NoStrictAliasing                           ="%(ClCompile.NoStrictAliasing)"
        UnrollLoops                                ="%(ClCompile.UnrollLoops)"
        LinkTimeOptimization                       ="%(ClCompile.LinkTimeOptimization)"
        CppExceptions                              ="%(ClCompile.CppExceptions)"
        RuntimeTypeInfo                            ="%(ClCompile.RuntimeTypeInfo)"
        CppLanguageStd                             ="%(ClCompile.CppLanguageStd)"
        CLanguageStd                               ="%(ClCompile.CLanguageStd)"
        AnsiCompliance                             ="%(ClCompile.AnsiCompliance)"
        CharUnsigned                               ="%(ClCompile.CharUnsigned)"
        MsExtensions                               ="%(ClCompile.MsExtensions)"
        PrecompiledHeader                          ="%(ClCompile.PrecompiledHeader)"
        PrecompiledHeaderOutputFile                ="%(ClCompile.PrecompiledHeaderOutputFile)"
        UndefinedBehavior                          ="%(ClCompile.UndefinedBehavior)"
        AddressSanitizer                           ="%(ClCompile.AddressSanitizer)"
        EnableCodeCoverage                         ="%(ClCompile.EnableCodeCoverage)"
        CodeCoverageOutputFile                     ="%(ClCompile.CodeCoverageOutputFile)"
        TrackerLogDirectory                        ="%(ClCompile.TrackerLogDirectory)"
        AdditionalOptions                          ="%(ClCompile.AdditionalOptions)"
        BuildingInIDE                              ="$(BuildingInsideVisualStudio)"
        Sources                                    ="@(ClCompile)"
        TLogReadFiles                              ="@(CLTLogReadFiles)"
        TLogWriteFiles                             ="@(CLTLogWriteFiles)"
        ToolExe                                    ="$(CLToolExe)"
        ToolPath                                   ="$(CLToolPath)"
        TrackFileAccess                            ="$(TrackFileAccess)"
        MinimalRebuildFromTracking                 ="%(ClCompile.MinimalRebuildFromTracking)"
        ToolArchitecture                           ="$(CLToolArchitecture)"
        AcceptableNonZeroExitCodes                 ="%(ClCompile.AcceptableNonZeroExitCodes)"
        DistributedBuild                           ="$(DistributedBuild)"
        DistributedBuildId                         ="$(DistributedBuildId)"
        SnDbsOptions                               ="$(SnDbsOptions)"
        MaxIncrediBuildCompiles                    ="$(MaxIncrediBuildCompiles)"
        PreprocessToFile                           ="$(PreprocessToFile)"
        ProjectName                                ="$(ProjectName)"
        ObjectExt                                  ="$(ObjectExt)"
        IntelliSenseProperty                       ="$(ORBISIntelliSense)"
        PlatformToolset                            ="$(PlatformToolset)"
        ContinueCompilingOnError                   ="$(ContinueCompilingOnError)"
        />

  </Target>

  <!-- *******************************************************************************************
        Link targets
       ******************************************************************************************* -->

  <!-- Override target in Microsoft.CppBuild.targets which adds paths to files we don't create to $(IntDir)$(ProjectName).write.1.tlog file -->
  <Target Name="ComputeLinkImportLibraryOutputsForClean" />

  <!-- Force the target ComputePchClGeneration to be called here which will all us to flag PCH files before ComputeCLOutputs is invoked prior to linking. -->
  <!-- This makes sure that PCHs sources are flagged when performing a link only without any compilation. -->
  <Target Name="PreComputeCLOutputs"
          DependsOnTargets="ComputePchClGeneration" />

  <!-- Override target in Microsoft.CppBuild.targets that gets the object paths creating a library. Exclude those from PCH files that were set in ComputePchClGeneration. -->
  <!-- This is needed to exclude any PCH generating source files to remove there output when a dependent project is using the Use Library Dependency Inputs link feature. -->
  <Target Name="GetResolvedLinkObjs" Returns="@(ObjFullPath)" DependsOnTargets="$(CommonBuildOnlyTargets);ComputeCLOutputs;ResolvedLinkObjs">
    <!-- Make sure that recurse into ResolvedLinkObjs of child projects-->
    <PropertyGroup>
      <_ObjFullPath Condition="'$(ConfigurationType)'=='StaticLibrary' and '@(Obj)'!='' and '%(Obj.GeneratesPchFile)'!='true'">@(Obj->'%(fullpath)')</_ObjFullPath>
    </PropertyGroup>

    <ItemGroup>
      <ObjFullPath Include="$(_ObjFullPath);@(_ResolvedNativeProjectReferencePaths->WithMetadataValue('FileType', 'obj')->ClearMetadata()->Distinct());@(Object->ClearMetadata()->Distinct())">
        <FileType>obj</FileType>
        <ProjectType>$(ConfigurationType)</ProjectType>
      </ObjFullPath>
    </ItemGroup>
  </Target>

  <!-- *******************************************************************************************
        Link
       ******************************************************************************************* -->

  <Target Name="Link"
          Condition="'@(Link)' != ''">

    <PropertyGroup>
      <Link_MinimalRebuildFromTracking Condition="'@(Link->AnyHaveMetadataValue('MinimalRebuildFromTracking', 'false'))' == 'true'">false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(BuildType)' != 'Build' or '$(ForceRebuild)' == 'true'" >false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(Link_MinimalRebuildFromTracking)' == ''">true</Link_MinimalRebuildFromTracking>
      <LinkYieldDuringToolExecution Condition="'$(LinkYieldDuringToolExecution)' == ''">false</LinkYieldDuringToolExecution>
      <LinkToolArchitecture Condition="'$(LinkToolArchitecture)' == ''">Native64Bit</LinkToolArchitecture>
    </PropertyGroup>

    <PropertyGroup>
      <PrxStubOutputDir Condition="'$(ConfigurationType)' != 'DynamicLibrary'"></PrxStubOutputDir>
      <PrxStubOutputDir Condition="'$(ConfigurationType)' == 'DynamicLibrary' and '$(PrxStubOutputDir)' == ''">$(OutDir)</PrxStubOutputDir>
      <PrxStubOutputDir Condition="'$(PrxStubOutputDir)' != '' and !HasTrailingSlash('$(PrxStubOutputDir)')">$(PrxStubOutputDir)\</PrxStubOutputDir>
    </PropertyGroup>

    <PropertyGroup>
      <ThinLtoCacheDir Condition="'$(ThinLtoCacheDir)' == ''">$(IntDir)$(ProjectName).lto\</ThinLtoCacheDir>
    </PropertyGroup>

    <PropertyGroup>
      <MakePrxStubOutputDir Condition="'$(PrxStubOutputDir)' != '' and !Exists('$(PrxStubOutputDir)')">true</MakePrxStubOutputDir>
      <MakeThinLtoCacheDir Condition="'$(ThinLtoCacheDir)' != '' and !Exists('$(ThinLtoCacheDir)') and
                                      '@(Link->AnyHaveMetadataValue('ThinLtoCaching', 'true'))' == 'true'">true</MakeThinLtoCacheDir>
    </PropertyGroup>

    <MakeDir Directories="$(PrxStubOutputDir)" Condition="'$(MakePrxStubOutputDir)' == 'true'" />
    <MakeDir Directories="$(ThinLtoCacheDir)" Condition="'$(MakeThinLtoCacheDir)' == 'true'" />

    <ItemGroup>
      <Link>
        <MapFileName Condition="'%(Link.MapFileName)' == ''">$(OutDir)$(TargetName).map</MapFileName>
      </Link>
    </ItemGroup>

    <ClangLink
        OutputFile                                 ="%(Link.OutputFile)"
        OutputFormat                               ="%(Link.OutputFormat)"
        PrxStubOutputDir                           ="$(PrxStubOutputDir)"
        AdditionalLibraryDirectories               ="%(Link.AdditionalLibraryDirectories);$(LibraryPath)"
        EditAndContinue                            ="%(Link.EditAndContinue)"
        InfoStripping                              ="%(Link.InfoStripping)"
        DataStripping                              ="%(Link.DataStripping)"
        DuplicateStripping                         ="%(Link.DuplicateStripping)"
        LinkTimeOptimization                       ="%(Link.LinkTimeOptimization)"
        ThinLtoCaching                             ="%(Link.ThinLtoCaching)"
        ThinLtoCacheDir                            ="%(Link.ThinLtoCacheDir)"
        Pad2mibText                                ="%(Link.Pad2mibText)"
        Pad2mibData                                ="%(Link.Pad2mibData)"
        Pad2mibRelRo                               ="%(Link.Pad2mibRelRo)"
        GenerateMapFile                            ="%(Link.GenerateMapFile)"
        MapFileName                                ="%(Link.MapFileName)"
        Addressing                                 ="%(Link.Addressing)"
        Sources                                    ="@(Link)"
        AdditionalDependencies                     ="%(Link.AdditionalDependencies)"
        TrackerLogDirectory                        ="%(Link.TrackerLogDirectory)"
        AdditionalOptions                          ="%(Link.AdditionalOptions)"
        TLogReadFiles                              ="@(LinkTLogReadFiles)"
        TLogWriteFiles                             ="@(LinkTLogWriteFiles)"
        ToolExe                                    ="$(LinkToolExe)"
        ToolPath                                   ="$(LinkToolPath)"
        TrackFileAccess                            ="$(TrackFileAccess)"
        MinimalRebuildFromTracking                 ="$(Link_MinimalRebuildFromTracking)"
        ToolArchitecture                           ="$(LinkToolArchitecture)"
        TrackerFrameworkPath                       ="$(LibTrackerFrameworkPath)"
        TrackerSdkPath                             ="$(LinkTrackerSdkPath)"
        TrackedInputFilesToIgnore                  ="@(LinkNoDependencies)"
        AcceptableNonZeroExitCodes                 ="%(Link.AcceptableNonZeroExitCodes)"
        YieldDuringToolExecution                   ="$(LinkYieldDuringToolExecution)"
        PlatformToolset                            ="$(PlatformToolset)"
        >
        <Output TaskParameter ="SkippedExecution" PropertyName="LinkSkippedExecution" />
    </ClangLink>

    <Message Text="$(MSBuildProjectFile) -&gt; $(TargetPath)" Importance="High"/>

  </Target>

  <PropertyGroup>
    <CppCleanDependsOn>$(CppCleanDependsOn);CleanLinkLtoCacheDir</CppCleanDependsOn>
  </PropertyGroup>
  
  <Target Name="CleanLinkLtoCacheDir" Condition="'$(ConfigurationType)' != 'StaticLibrary'">

    <PropertyGroup>
      <ThinLtoCacheDir Condition="'$(ThinLtoCacheDir)' != '' and !HasTrailingSlash('$(ThinLtoCacheDir)')">$(ThinLtoCacheDir)\</ThinLtoCacheDir>
      <ThinLtoCacheDir Condition="'$(ThinLtoCacheDir)' == ''">$(IntDir)$(ProjectName).lto\</ThinLtoCacheDir>
    </PropertyGroup>

    <ItemGroup>
      <LtoCacheClean Include="$(ThinLtoCacheDir)llvmcache*" />
    </ItemGroup>

    <Message Text="Cleaning LTO cache files: $(ThinLtoCacheDir)" Importance="High" Condition="'@(LtoCacheClean)' != ''"/>

    <Delete Files="@(LtoCacheClean)"/>
  </Target>

  <Import Project="$(VCTargetsPath)\Platforms\ORBIS\ImportAfter\*.$(PlatformToolset).targets" Condition="Exists('$(VCTargetsPath)\Platforms\ORBIS\ImportAfter')" />
</Project>
