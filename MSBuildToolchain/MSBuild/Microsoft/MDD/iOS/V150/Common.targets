<!--
***********************************************************************************************
Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Condition=" '$(ForceImportBeforeiOSTargets)' != '' and exists('$(ForceImportBeforeiOSTargets)')" Project="$(ForceImportBeforeiOSTargets)"/>

  <PropertyGroup>
    <!-- By default we do not want to build project to project references if they are disabled in the solution configuration -->
    <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
    <_BuildActionType Condition="'$(_BuildActionType)' == ''">Build</_BuildActionType>
    <!-- Correct OutputPath and IntermediateOutputPath as it may be out of sync with OutDir and IntDir-->
    <OutputPath>$(OutDir)</OutputPath>
    <IntermediateOutputPath>$(IntDir)</IntermediateOutputPath>
    <LastBuildUnsuccessful>$(IntDir).unsuccessfulbuild</LastBuildUnsuccessful>
    <_RemoteProjectRecipe>$(ProjectDir)$(IntDir)$(ProjectName).remoteproject</_RemoteProjectRecipe>
    <_RecipeFile>$(OutDir)$(TargetName)$(TargetExt).recipe</_RecipeFile>
    <_MergedRecipeFile>$(OutDir)$(TargetName)$(TargetExt).recipe.merged</_MergedRecipeFile>
    <FrameworkIncludePath>$(iOSFrameworksSearchPath)</FrameworkIncludePath>
    <!-- can add this mapping only here as project can override OutDir -->
    <LocalRemoteDirectoriesMap>$(MacRootDir)$(MacBuildRoot)\$(OutDir.Replace(":",""))=%24(BUILT_PRODUCTS_DIR);$(LocalRemoteDirectoriesMap)</LocalRemoteDirectoriesMap>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.Targets" />

  <!--  Needed to add this after common.targets so native P2P references are resolved in IDE -->
  <ItemDefinitionGroup>
    <ProjectReference>
      <OutputItemType>_ResolvedNativeProjectReferencePaths</OutputItemType>
    </ProjectReference>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <TaskPath Condition="'$(TaskPath)' == ''">$(VCTargetsPath)Application Type\iOS\1.0\Microsoft.Build.CPPTasks.iOS.dll</TaskPath>
  </PropertyGroup>

  <UsingTask TaskName="GenerateXCConfig" AssemblyFile="$(TaskPath)" />
  <UsingTask TaskName="GenerateRecipe" AssemblyFile="$(TaskPath)" />
  <UsingTask TaskName="MergeRecipelists" AssemblyFile="$(TaskPath)" />
  <UsingTask TaskName="VCRemoteBuild" AssemblyFile="$(TaskPath)" />
  <UsingTask TaskName="VCRemoteClean" AssemblyFile="$(TaskPath)" />
  <UsingTask TaskName="GetCaseSensitivePath" AssemblyFile="$(TaskPath)" />

  <!-- ***************************************************************** -->
  <!-- build order -->
  <!-- ***************************************************************** -->

  <PropertyGroup>
    <!-- do nothing for 'generate sources' and 'compile' passes -->
    <BuildGenerateSourcesAction>_BuildGenerateSourcesAction</BuildGenerateSourcesAction>
    <BuildCompileAction>_BuildCompileAction</BuildCompileAction>
    <BuildLinkAction>_BuildLinkAction</BuildLinkAction>
    <LangID Condition="'$(LangID)' == ''">1033</LangID>
  </PropertyGroup>

  <PropertyGroup>
    <CommonBuildOnlyTargets>
      SetBuildDefaultEnvironmentVariables;
      PrepareForBuild;
      ResolveReferences;
    </CommonBuildOnlyTargets>

    <BuildLinkTargets>
      $(BuildLinkTargets);
      CreateRecipeFile;
      MergeRecipeFiles;
      iOSPackage;
      iOSPackageBuild;
      FinalizeBuildStatus;
    </BuildLinkTargets>

    <AfterBuildLinkTargets>
      $(AfterBuildLinkTargets);
      PostBuildEvent;
    </AfterBuildLinkTargets>

    <BuildSteps Condition="'$(BuildSteps)' == ''">
      BuildGenerateSources;
      BuildCompile;
      BuildLink;
      IncrementalClean;
    </BuildSteps>

    <BuildDependsOn>
      $(BuildSteps);
    </BuildDependsOn>

    <CoreCleanDependsOn>
      $(CoreCleanDependsOn);
      iOSPackageClean
    </CoreCleanDependsOn>
  </PropertyGroup>


  <Target Name="_BuildGenerateSourcesAction" />
  <Target Name="_BuildCompileAction" />

  <Target Name="_BuildLinkAction"
        DependsOnTargets="$(CommonBuildOnlyTargets);$(BeforeBuildLinkTargets);$(BuildLinkTargets);$(AfterBuildLinkTargets)" />


  <!-- *******************************************************************************************
        Set Build Default Environment Variables
       ******************************************************************************************* -->

  <UsingTask TaskName="SetEnv" AssemblyFile="$(VCTargetsPath)Microsoft.Build.CppTasks.Common.dll"/>

  <Target Name="SetBuildDefaultEnvironmentVariables"
          Condition="'$(UseEnv)' != 'true'">

    <GetCaseSensitivePath Path="$(ProjectDir)" >
      <Output TaskParameter="CasedPath" PropertyName="CasedProjectDir" />
    </GetCaseSensitivePath>

    <GetCaseSensitivePath Path="$(XCConfigDirectory)" >
      <Output TaskParameter="CasedPath" PropertyName="CasedXCConfigDirectory" />
    </GetCaseSensitivePath>
    
    <PropertyGroup>
      <!-- Fall back to $(ProjectDir) -->
      <CasedProjectDir Condition="'$(CasedProjectDir)' == ''">$(ProjectDir)</CasedProjectDir>
      <!-- Use cased value if available. -->
      <XCConfigDirectory Condition="'$(CasedXCConfigDirectory)' != ''">$(CasedXCConfigDirectory)</XCConfigDirectory>
    </PropertyGroup>

    <SetEnv Name   ="PATH"
            Value  ="$(ExecutablePath)"
            Prefix ="false">
    </SetEnv>
  </Target>

  <Target Name="MarkLastBuildUnsuccessful" >
    <!-- Touch and create this file to indicate that the build has started.
    In case of an error, this will remain on disk as quick indication to the IDE that the project still needs building. -->
    <Touch AlwaysCreate="true" Files="$(LastBuildUnsuccessful)" Condition="'$(UseLastBuildUnsuccessful)' != 'false'"/>
  </Target>

  <!-- *******************************************************************************************
        FinalizeBuildStatus target
       ******************************************************************************************* -->
  <Target Name="FinalizeBuildStatus">
    <!-- Delete the incomplete build indicator. -->
    <Delete Files="$(LastBuildUnsuccessful)" Condition="Exists($(LastBuildUnsuccessful))"/>
  </Target>
  
  <Target Name="GetRecipeFile" Returns="$(RecipeFile)">
    <PropertyGroup>
      <RecipeFile>$(_RecipeFile)</RecipeFile>
    </PropertyGroup>
  </Target>

  <Target Name="CreateRecipeFile" DependsOnTargets="$(CommonBuildOnlyTargets);_AssignProjectReferencesPlatformType">
    <Message Text="Getting Recipe files from the following referenced projects:'@(_MSBuildProjectReferenceExistent->WithMetadataValue('ProjectApplicationType', 'iOS')" Importance="Normal" />
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent->WithMetadataValue('ProjectApplicationType', 'iOS'))"
             Targets="GetRecipeFile"
             BuildInParallel="$(BuildInParallel)"
             Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
             Condition="'%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''">
      <Output TaskParameter="TargetOutputs" ItemName="DirectDependenciesRecipelistFile"/>
    </MSBuild>

    <Message Text="DirectDependenciesRecipelistFile='@(DirectDependenciesRecipelistFile)'" Importance="Normal"/>

    <ItemGroup>
      <RecipeFileItem Include="$(_RecipeFile)">
        <LibraryPath />
        <RecipeFiles>@(DirectDependenciesRecipelistFile)</RecipeFiles>
      </RecipeFileItem>
    </ItemGroup>

    <Message Text="Generating this project recipe '@(RecipeFileItem)' in '$(OutDir)' folder" Importance="Normal"/>

    <GenerateRecipe    RecipeFiles="@(RecipeFileItem)"
                       OutDir="$(OutDir)" />

    <!-- Output for cleaning -->
    <ItemGroup>
      <FileWrites Include="$(_RecipeFile)" />
    </ItemGroup>
  </Target>

  <Target Name="MergeRecipeFiles">
    <MergeRecipelists
        RecipeFile="$(_RecipeFile)">
       <Output TaskParameter="OutputRecipeFileItem" ItemName="outputRecipeFileItem" />
    </MergeRecipelists>
    <Message Text="Merged recipes from '$(_RecipeFile))' to '@(outputRecipeFileItem)'" Importance="Normal"/>
  </Target>

  <Target Name="_AssignProjectReferencesPlatformType">
    <ItemGroup>
      <_MSBuildProjectReferenceExistent Include="@(_MSBuildProjectReferenceExistent)">
        <ProjectApplicationType>iOS</ProjectApplicationType>
      </_MSBuildProjectReferenceExistent>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <PackageDependsOn>$(PackageDependsOn);MarkLastBuildUnsuccessful;MakePackageDirectory;CopyPackageContentToOutput;MergeRecipeFiles</PackageDependsOn>
  </PropertyGroup>

  <Target Name="MakePackageDirectory" >
  </Target>

  <Target Name="CopyPackageContentToOutput" >
  </Target>

  <Target Name="iOSPackage" DependsOnTargets="$(PackageDependsOn)">

    <ItemGroup>
      <ReferencedProjectOutputs Include="%(outputRecipeFileItem.BuiltOutputs)" />
      <ReferencedProjectOutputsInConfigurationBuildDir Condition="'@(ReferencedProjectOutputs)' != ''" Include="%24(CONFIGURATION_BUILD_DIR)/%(ReferencedProjectOutputs.Filename)%(ReferencedProjectOutputs.Extension)" />
    </ItemGroup>

    <PropertyGroup>
      <GenerateXCConfigIncremental Condition="'$(GenerateXCConfigIncremental)' == ''">true</GenerateXCConfigIncremental>
      <_ReferenceLibrariesReplacement>ReferenceLibraries=@(ReferencedProjectOutputsInConfigurationBuildDir, ' ');</_ReferenceLibrariesReplacement>
      <_ReferenceLibrariesReplacement Condition="'$(VC_Target_User_XCConfig)' != ''">$(_ReferenceLibrariesReplacement);VC_REFERENCE_XCCONFIG=#include "$(VC_Target_User_XCConfig)"</_ReferenceLibrariesReplacement>
      <_ReferenceLibrariesReplacement Condition="'$(VC_Target_User_XCConfig)' == ''">$(_ReferenceLibrariesReplacement);VC_REFERENCE_XCCONFIG=</_ReferenceLibrariesReplacement>
    </PropertyGroup>

    <GenerateXCConfig
      OutDir="$(XCConfigDirectory)"
      IntDir="$(IntDir)"
      ReplacementTable="$(_ReferenceLibrariesReplacement)"
      Incremental="$(GenerateXCConfigIncremental)" >
        <Output TaskParameter="CreatedFiles" ItemName="_copiedFiles" />
        <Output TaskParameter="IncrementalFilePath" ItemName="_copiedFiles" />
    </GenerateXCConfig>

    <Message Text="Generated xcconfig file: '@(_copiedFiles)' using '$(_ReferenceLibrariesReplacement)' replacement table." Importance="Normal" />

    <!-- Output for cleaning -->
    <ItemGroup>
      <FileWrites Include="$(_RecipeFile).merged;@(_copiedFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="iOSPackageClean"
           DependsOnTargets="SetBuildDefaultEnvironmentVariables;$(iOSPackageCleanDependsOn)">

    <VCRemoteClean
        RemoteRootDirectory="$(RemoteRootDirectory)"
        LocalProjectDirectory="$(CasedProjectDir)"
        LocalIntermediateDirectory="$(IntDir)"
        ProjectName="$(ProjectName)"
        LocalPathsToClean="@(LocalPathsToClean)"
        RemotePathsToClean="@(RemotePathsToClean)"
        DirectoriesMap="$(LocalRemoteDirectoriesMap)"
        RemoteXCodeClean="$(RemoteXCodeClean)"
    />
  </Target>

  <ItemGroup>
    <SourcesToCopy Include="@(Content);@(ClCompile);@(ClInclude);@(PBXCompile);@(None);@(InfoPlist);$(XCConfigDirectory)\vcreference.xcconfig" />
  </ItemGroup>

  <Target Name="iOSPackageBuild">
    <Message Text="Pbxproj directory: '$(PbxprojDirectory)'" Importance="Normal" />
    <Message Text="TargetName: '$(TargetName)$(TargetExt)'" Importance="Normal" />

    <VCRemoteBuild
       Sources="@(SourcesToCopy)"
       ReferencedProjectOutputs="@(ReferencedProjectOutputs)"
       LocalXCodeProjectDirectory="$(PbxprojDirectory)"
       LocalOutputDirectory="$(OutDir)"
       LocalIntermediateDirectory="$(IntDir)"
       PayloadDescriptionFilepath="$(PayloadDescriptionFilepath)"
       RemoteRootDirectory="$(RemoteRootDirectory)"
       Configuration="$(Configuration)"
       Platform="$(Platform)"
       Architecture="$(PlatformNativeArch)"
       ProjectName="$(ProjectName)"
       DirectoriesMap="$(LocalRemoteDirectoriesMap)"
       LocalProjectDirectory="$(CasedProjectDir)"
       TargetName="$(TargetName)"
       TargetExt="$(TargetExt)"
       ProvisioningProfile="$(ProvisioningProfile)">
    </VCRemoteBuild>

    <ItemGroup>
      <FileWrites Include="$(IntDir)$(ProjectName).remoteproject" />
    </ItemGroup>
  </Target>

  <!-- ***************************************************************** -->
  <!-- design time (IDE) related properties and items -->
  <!-- ***************************************************************** -->

  <PropertyGroup>
    <!-- iOSTargetsPath must have trailing slash. -->
    <XamlDirectory>$(iOSTargetsPath)$(LangID)</XamlDirectory>
    <AdditionalExtensionsToHideInShowAllFilesMode>.iosproj;.pbxproj;$(AdditionalExtensionsToHideInShowAllFilesMode)</AdditionalExtensionsToHideInShowAllFilesMode>
  </PropertyGroup>

  <!-- project capabilities -->
  <PropertyGroup>
    <PropertyManagerSupported>false</PropertyManagerSupported>
    <IncludeVCDefaultReferenceCapabilities>false</IncludeVCDefaultReferenceCapabilities>
  </PropertyGroup>

  <ItemGroup>
    <ProjectCapability Include="
                          ProjectReferences;
                          iOSFrameworkReferences;
                          iOS;
                          iOSNative;
                          iOSPackaging;
                          ReferencesFolder;
                          ProjectConfigurationsDeclaredAsItems;
                          NoVCDefaultBuildUpToDateCheckProvider;
                           " />
  </ItemGroup>

  <PropertyGroup>
    <ReferencePathForAddReferenceDialog>$(ReferencePath);$(iOSFrameworksSearchPath);</ReferencePathForAddReferenceDialog>
    <!-- make SetISensePaths target to run for designtime build -->
    <DetermineProjectTypeTargets>$(DetermineProjectTypeTargets);SetISensePaths</DetermineProjectTypeTargets>
  </PropertyGroup>

  <Target Name="SetISensePaths"
          DependsOnTargets="$(SetiOSPathsDependsOn)" >
    <PropertyGroup Condition ="'$(DesignTimeBuild)' == 'true'">
      <IncludePath>$(IncludePath);$(iOSIncludePath);</IncludePath>
      <FrameworkIncludePath>$(ReferencePath);$(iOSFrameworksSearchPath)</FrameworkIncludePath>
    </PropertyGroup>
  </Target>

  <!-- property pages -->
  <ItemGroup Condition="'$(UseDefaultPropertyPageSchemas)' != 'false'">
    <!-- Property pages that always apply -->
    <PropertyPageSchema Include="$(XamlDirectory)\ProjectItemsSchema.xaml"/>

    <PropertyPageSchema Include="$(XamlDirectory)\General.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XamlDirectory)\FileGeneral.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XamlDirectory)\folder.xaml">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Debuggers -->
    <DebuggerPages Include="$(XamlDirectory)\iOSDebugger.xaml" />

    <!-- We always need debuggers general page as soon as we have at least one debugger -->
    <PropertyPageSchema Condition="'@(DebuggerPages)' != ''" Include="$(XamlDirectory)\DebuggerGeneral.xaml" />

    <PropertyPageSchema Include="@(DebuggerPages)">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XamlDirectory)\BrowseObject.xaml;">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>
       
    <PropertyPageSchema Include="$(iOSCommonTargetsPath)$(LangID)\directories_ios.xml"/>
    <PropertyPageSchema Include="$(iOSCommonTargetsPath)$(LangID)\clang_ios.xml"/>
  </ItemGroup>

  <PropertyGroup Condition="'$(_DebugMessages)' == 'true'">
    <BuildDependsOn>
      _DebugPrint;
      $(BuildDependsOn);
    </BuildDependsOn>
  </PropertyGroup>


  <!-- designtime targets called by VC project system -->

  <!--<Target Name="GetClCommandLines"
          Returns="@(_EmptyItemGroup)">
  </Target>

  <Target Name="GetProjectDirectories"
          Returns="@(_ProjectDirectories)">
    <ItemGroup>
      <_ProjectDirectories Include="dummy">
        <ProjectDir>$(ProjectDir)</ProjectDir>
      </_ProjectDirectories>
    </ItemGroup>
  </Target>

  <Target Name="GetGeneratedFiles"
          Returns="@(_EmptyItemGroup)">
  </Target>

  <Target Name="GetProjectReferencesInfo"
          Returns="@(_EmptyItemGroup)">
  </Target>

  --><!-- debug/diagnostic targets --><!--

  <Target Name="_PrintPropertyPages">
    <ItemGroup>
      <PropertyPageSchema>
        <ExistsOnDisk Condition="Exists(%(PropertyPageSchema.Identity))">true</ExistsOnDisk>
      </PropertyPageSchema>
    </ItemGroup>
    <Message Text="PropertyPageSchema='%(PropertyPageSchema.Identity)'&#xA;ExistsOnDisk='%(PropertyPageSchema.ExistsOnDisk)'&#xA;Context='%(PropertyPageSchema.Context)'&#xA;" Importance="High" />
    <Message Text="ProjectTools=@(ProjectTools)&#xA;" Importance="High" />
  </Target>-->


  <Import Condition="'$(ForceImportAfteriOSTargets)' != '' and exists('$(ForceImportAfteriOSTargets)')" Project="$(ForceImportAfteriOSTargets)"/>
</Project>
