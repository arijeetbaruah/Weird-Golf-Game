ConstantBuffer RenderObjectData
{
	column_major matrix modelMatrix;
};

ConstantBuffer CameraData
{
	column_major matrix camMatrix;
};

ConstantBuffer LightColor
{
	float4 lightColor;
};

ConstantBuffer LightPos
{
	float3 lightPos;
};

ConstantBuffer LightRadius
{
	float radius;
};

ConstantBuffer LightIntensity
{
	float intensity;
};

ConstantBuffer CameraPos
{
	float3 cameraPos;
};

ConstantBuffer InvertModelMat
{
	column_major matrix invertModelMat; 
};

ConstantBuffer LightViewProj
{
	column_major matrix lightViewProj;
};

struct VS_INPUT
{
	float3 Position		: POSITION0;
	float2 UV			: TEXCOORD0;
	float3 Normal		: TEXCOORD1;
	float3 Tangent		: TEXCOORD2;
};

struct VS_OUTPUT
{
	float4 Position		: S_POSITION;
	float2 UV			: TEXCOORD0; 
	float4 lightColor;
	float3 normal;
	float3 fragPos;
	float3 lightPos;
	float radius;
	float3 cameraPos;
	float intensity;
	float4 fragPosLightSpace;
};

VS_OUTPUT main(VS_INPUT Input)
{
	VS_OUTPUT Output; 

	Output.Position = mul(mul(camMatrix, modelMatrix), float4(Input.Position.xyz, 1));
	//Output.Color = Input.Color;
	Output.lightColor = lightColor;
	Output.UV = Input.UV;
	float3x3 normalMatrix = float3x3(transpose(invertModelMat));
	Output.normal = normalize(mul(normalMatrix, normalize(Input.Normal)));
	Output.fragPos = float3(mul(modelMatrix, float4(Input.Position.xyz, 1)));
	Output.lightPos = lightPos;
	Output.radius = radius;
	Output.cameraPos = cameraPos;
	Output.intensity = intensity;
	Output.fragPosLightSpace = mul(mul(lightViewProj, modelMatrix), float4(Input.Position.xyz, 1));
	return Output;
}
